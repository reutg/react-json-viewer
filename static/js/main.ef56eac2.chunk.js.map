{"version":3,"sources":["components/Search.js","components/json-output/ToggleButton.js","components/json-output/ObjectWrapper.js","components/json-output/ObjectValue.js","components/json-output/JsonOutput.js","App.js","serviceWorker.js","index.js"],"names":["Search","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleInput","event","setState","url","target","value","getJsonUrl","props","state","react_default","a","createElement","className","type","placeholder","onChange","onClick","Component","ToggleButton","toggleChildren","_this$props","isOpened","react","length","keys","ObjectWrapper","Array","concat","tree","toConsumableArray","children","splice","push","showType","wrappedElementTree","wrapElementTree","json_output_ToggleButton","ObjectValue","formattedValue","renderValue","JsonOutput","data","_i","_properties","property","key","json_output_ObjectWrapper","renderChildren","json_output_ObjectValue","App","_ref","asyncToGenerator","regenerator_default","mark","_callee","response","json","wrap","_context","prev","next","fetch","sent","t0","console","log","alert","stop","_x","apply","arguments","undefined","src_components_Search","components_json_output_JsonOutput","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ef56eac2.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nimport './Search.css'\r\n\r\nclass Search extends Component {\r\n  constructor() {\r\n    super()\r\n\r\n    this.state = {\r\n      url: '',\r\n    }\r\n  }\r\n\r\n  handleInput = event => {\r\n    this.setState({ url: event.target.value })\r\n  }\r\n\r\n  getJsonUrl = () => {\r\n    this.props.getJsonUrl(this.state.url)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='search-container'>\r\n        <input\r\n          type='text'\r\n          placeholder='Enter url'\r\n          value={this.state.url}\r\n          onChange={this.handleInput}\r\n        />\r\n\r\n        <button className='show-button' onClick={this.getJsonUrl}>Show JSON</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Search\r\n","import React, { Component, Fragment } from 'react'\r\n\r\nclass ToggleButton extends Component {\r\n  toggleChildren = () => {\r\n    this.props.toggleChildren()\r\n  }\r\n\r\n  render() {\r\n    const { value, isOpened } = this.props\r\n    \r\n    if (!value || typeof value !== 'object') {\r\n      return <Fragment />\r\n    }\r\n    \r\n    const { length } = Object.keys(value)\r\n    \r\n    return (\r\n      <Fragment>\r\n        {length ? (\r\n          <button className=\"toggle-button\" onClick={this.toggleChildren}>\r\n            {isOpened ? <Fragment>&#9662;</Fragment> : <Fragment>&#9656;</Fragment>}\r\n          </button>\r\n        ) : (\r\n          ''\r\n        )}\r\n      </Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ToggleButton\r\n","import React, { Component, Fragment } from 'react'\r\n\r\nimport ToggleButton from './ToggleButton'\r\n\r\nclass ObjectWrapper extends Component {\r\n  showType(value) {\r\n    if (value instanceof Array) {\r\n      return `Array(${value.length})`\r\n    } else if (value instanceof Object) {\r\n      return `Object(${Object.keys(value).length})`\r\n    }\r\n  }\r\n  \r\n  wrapElementTree(){\r\n    const { value } = this.props\r\n    const tree = [...this.props.children]\r\n    \r\n    if (!this.props.isOpened) {\r\n      tree.splice(1, 0, this.showType(value))\r\n      return tree\r\n    }\r\n\r\n    if (value instanceof Array) {\r\n      tree.splice(1, 0, '[')\r\n      tree.push(']')\r\n    } else if (value instanceof Object) {\r\n      tree.splice(1, 0, '{')\r\n      tree.push('}')\r\n    }\r\n\r\n    return tree\r\n  }\r\n\r\n  render() {\r\n    const { value, isOpened } = this.props\r\n    const wrappedElementTree = this.wrapElementTree()\r\n\r\n    return (\r\n      <Fragment>\r\n        <ToggleButton\r\n          isOpened={isOpened}\r\n          value={value}\r\n          toggleChildren={this.props.toggleChildren}\r\n        />\r\n        {wrappedElementTree}\r\n      </Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ObjectWrapper\r\n","import React, { Component, Fragment } from 'react'\r\n\r\nimport './JsonOutput.css'\r\n\r\nclass ObjectValue extends Component {\r\n  renderValue(value) {\r\n    let formattedValue = <span className='null'>(null)</span>\r\n\r\n    if (typeof value === 'string') {\r\n      formattedValue = <span className='text'>\"{value}\"</span>\r\n    } else if (typeof value === 'number') {\r\n      formattedValue = <span className='number'>{value}</span>\r\n    }\r\n\r\n    return formattedValue\r\n  }\r\n\r\n  render() {\r\n    const { value } = this.props\r\n\r\n    return <Fragment>{this.renderValue(value)}</Fragment>\r\n  }\r\n}\r\n\r\nexport default ObjectValue\r\n","import React, { Component, Fragment } from 'react'\r\n\r\nimport ObjectWrapper from './ObjectWrapper'\r\nimport ObjectValue from './ObjectValue'\r\n\r\nimport './JsonOutput.css'\r\n\r\nclass JsonOutput extends Component {\r\n  constructor() {\r\n    super()\r\n\r\n    this.state = {\r\n      isOpened: true,\r\n    }\r\n  }\r\n\r\n  renderChildren(value) {\r\n    const data = []\r\n    const properties = Object.keys(value)\r\n\r\n    for (const property of properties) {\r\n      if (this.state.isOpened) {\r\n        data.push(\r\n          <JsonOutput\r\n            key={property}\r\n            property={property}\r\n            value={value[property]}\r\n            isOpened={this.state.isOpened}\r\n          />\r\n        )\r\n      }\r\n    }\r\n\r\n    return data\r\n  }\r\n\r\n  toggleChildren = () => {\r\n    this.setState({ isOpened: !this.state.isOpened })\r\n  }\r\n\r\n  render() {\r\n    const { value, property } = this.props\r\n    const { isOpened } = this.state\r\n\r\n    if (typeof value === 'undefined') {\r\n      return <Fragment />\r\n    }\r\n\r\n    return (\r\n      <ul>\r\n        <li>\r\n          <ObjectWrapper\r\n            isOpened={isOpened}\r\n            value={value}\r\n            toggleChildren={this.toggleChildren}\r\n          >\r\n            {property ? `${property}: ` : ''}\r\n            {value instanceof Array || value instanceof Object ? \r\n              this.renderChildren(value)\r\n             : <ObjectValue value={value} />\r\n            }\r\n          </ObjectWrapper>\r\n        </li>\r\n      </ul>\r\n    )\r\n  }\r\n}\r\n\r\nexport default JsonOutput\r\n","import React, { Component, Fragment } from 'react'\n\nimport Search from './components/Search'\nimport JsonOutput from './components/json-output/JsonOutput'\n\nimport './App.css'\n\nclass App extends Component {\n  constructor() {\n    super()\n\n    this.state = {\n      url: '',\n      json: undefined,\n    }\n  }\n\n  getJsonUrl = async url => {\n    try {\n      const response = await fetch(url)\n      const json = await response.json()\n      this.setState({ json })\n    } catch (err) {\n      console.log(err)\n      alert(\"Couldn't fetch the JSON\")\n    }\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <Search getJsonUrl={this.getJsonUrl} />\n        <JsonOutput value={this.state.json} />\n      </Fragment>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}